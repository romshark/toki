// Generated by github.com/romshark/toki. DO NOT EDIT.
package tokibundle

import (
	"bytes"
	"fmt"
	"io"
	"iter"
	"sync"
	"unsafe"

	"github.com/go-playground/locales"
	"github.com/go-playground/locales/currency"
	"golang.org/x/text/language"
)

/*** HELPERS ***/

// wrs writes a string literal to w.
// unsafe.Slice eliminates an unnecessary allocation treating the string as a byte slice.
func wrs(w io.Writer, s string) (int, error) {
	return w.Write(unsafe.Slice((*byte)(unsafe.Pointer(unsafe.StringData(s))), len(s)))
}

type stringifier interface {
	comparable
	String() string
}

type stringified[T stringifier] struct {
	lock sync.RWMutex
	m    map[T]string
}

// String return the result of t.String(), cached by value of t if possible.
func (c *stringified[T]) String(t T) string {
	c.lock.RLock()
	s, ok := c.m[t]
	c.lock.RUnlock()

	if ok {
		return s
	}

	s = t.String()
	c.lock.Lock()
	defer c.lock.Unlock()
	c.m[t] = s
	return s
}

// newStringified creates a new stringifier cache with preallocated capacity of cap.
func newStringified[T stringifier](cap int) *stringified[T] {
	return &stringified[T]{m: make(map[T]string, cap)}
}

const (
	minInt53 = -1 << 53
	maxInt53 = 1 << 53
)

func pluralRuleCardinal(t locales.Translator, quantity any) locales.PluralRule {
	var q float64
	switch n := quantity.(type) {
	case uint:
		if n >= maxInt53 {
			return locales.PluralRuleOther // Lossy conversion.
		}
		q = float64(n)
	case uint8:
		q = float64(n)
	case uint16:
		q = float64(n)
	case uint32:
		q = float64(n)
	case uint64:
		if n >= maxInt53 {
			return locales.PluralRuleOther // Lossy conversion.
		}
		q = float64(n)
	case int:
		if n >= maxInt53 || n <= minInt53 {
			return locales.PluralRuleOther // Lossy conversion.
		}
		q = float64(n)
	case int8:
		q = float64(n)
	case int16:
		q = float64(n)
	case int32:
		q = float64(n)
	case int64:
		if n >= maxInt53 || n <= minInt53 {
			return locales.PluralRuleOther // Lossy conversion.
		}
		q = float64(n)
	case float32:
		q = float64(n)
	case float64:
		q = float64(n)
	default:
		// Incorrect input type, fallback to other rule.
		return locales.PluralRuleOther
	}
	return t.CardinalPluralRule(float64(q), 0)
}

func pluralRuleOrdinal(t locales.Translator, quantity any) locales.PluralRule {
	var q float64
	switch n := quantity.(type) {
	case uint:
		if n >= maxInt53 {
			// Lossy conversion.
			return locales.PluralRuleOther
		}
		q = float64(n)
	case uint8:
		q = float64(n)
	case uint16:
		q = float64(n)
	case uint32:
		q = float64(n)
	case uint64:
		if n >= maxInt53 {
			// Lossy conversion.
			return locales.PluralRuleOther
		}
		q = float64(n)
	case int:
		if n >= maxInt53 || n <= minInt53 {
			// Lossy conversion.
			return locales.PluralRuleOther
		}
		q = float64(n)
	case int8:
		q = float64(n)
	case int16:
		q = float64(n)
	case int32:
		q = float64(n)
	case int64:
		if n >= maxInt53 || n <= minInt53 {
			// Lossy conversion.
			return locales.PluralRuleOther
		}
		q = float64(n)
	case float32:
		q = float64(n)
	case float64:
		q = float64(n)
	default:
		// Incorrect input type, fallback to default form.
		return locales.PluralRuleOther
	}
	return t.OrdinalPluralRule(float64(q), 0)
}

func subtract(number any, amount uint) any {
	switch v := number.(type) {
	case int:
		return v - int(amount)
	case uint:
		return v - uint(amount)
	case int8:
		return v - int8(amount)
	case uint8:
		return v - uint8(amount)
	case int16:
		return v - int16(amount)
	case uint16:
		return v - uint16(amount)
	case int32:
		return v - int32(amount)
	case uint32:
		return v - uint32(amount)
	case int64:
		return v - int64(amount)
	case uint64:
		return v - uint64(amount)
	case float64:
		return v - float64(amount)
	case float32:
		return v - float32(amount)
	default:
		return number
	}
}

// Prevent "unused function" linter errors.
var (
	_    = pluralRuleCardinal(nil, maxInt53)
	_    = pluralRuleOrdinal(nil, maxInt53)
	_    = subtract(0, 0)
	_, _ = sv(nil)
)

/*** INTERNALS ***/

var (
	allLocales     []language.Tag
	readers        []Reader
	matcher        language.Matcher
	readerByLocale map[string]Reader

	localeStringCache = newStringified[language.Tag](0)
	baseStringCache   = newStringified[language.Base](0)
)

var poolBuf = sync.Pool{
	New: func() any {
		var b bytes.Buffer
		b.Grow(BufferCap)
		return &b
	},
}

func poolBufGet() *bytes.Buffer {
	return poolBuf.Get().(*bytes.Buffer)
}

func poolBufPut(b *bytes.Buffer) {
	if b.Cap() > BufferCap {
		return // Too large; Drop for GC to collect.
	}
	b.Reset()
	poolBuf.Put(b)
}

func init() {
	readerByLocale = make(map[string]Reader)
	for r := range Catalogs() {
		locale := r.Locale()
		allLocales = append(allLocales, locale)
		localeStr := localeStringCache.String(locale)
		readerByLocale[localeStr] = r
		readers = append(readers, r)
	}
	matcher = language.NewMatcher(allLocales)
}

/*** DEFAULTS ***/

// TokiVersion defines the version of Toki this code was generated by.
const TokiVersion = "0.8.0"

// DefaultLocale defines the default language of the Toki bundle.
// This is the language used by the TIKs in the source code.
const DefaultLocale = "en"

/*** CONFIGURABLES ***/

// BufferCap defines the default buffer capacity of 8KiB.
var BufferCap = 8 * 1024

// MissingTranslation is the default missing translation handler which
// by default tries to fall back to the default locale.
// If a translation is missing for the default language it panics.
var MissingTranslation = func(
	w io.Writer, locale language.Tag, tik string, args ...any,
) (written int, err error) {
	dl := language.MustParse(DefaultLocale)
	if locale == dl {
		panic(fmt.Errorf("missing translation for TIK: %!q(MISSING)", tik))
	}
	d, _ := Match(dl)
	return d.Write(w, tik, args...)
}

/*** PUBLIC API ***/

// Gender can be either of:
//
//	GenderNeutral // They
//	GenderMale    // He
//	GenderFemale  // She
type Gender uint8

const (
	_ Gender = iota

	// GenderNeutral represents the neutral gender.
	GenderNeutral // They

	// GenderMale represents the male gender.
	GenderMale // He

	// GenderFemale represents the female gender.
	GenderFemale // She
)

// String is a string value infused with gender information.
type String struct {
	Value  string
	Gender Gender
}

// Currency is an amount of money of a certain currency.
type Currency struct {
	Amount float64
	Type   currency.Type
}

func sv(v any) (string, Gender) {
	switch v := v.(type) {
	case string:
		return v, GenderNeutral
	case String:
		return v.Value, v.Gender
	}
	return fmt.Sprintf("%v", v), GenderNeutral // Safe fallback.
}

// Reader reads localized messages.
type Reader interface {
	// Locale provides the locale this reader localizes for.
	Locale() language.Tag

	// String provides a localized translation string for the given TIK.
	String(tik string, args ...any) (localized string)

	// Write writes a localized translation for the given TIK to writer.
	Write(writer io.Writer, tik string, args ...any) (written int, err error)

	// Translator returns the localized translator of github.com/go-playground/locales
	// for the locale this reader localizes for.
	Translator() locales.Translator
}

// Match returns the best matching reader for locales.
func Match(locales ...language.Tag) (Reader, language.Confidence) {
	t, _, c := matcher.Match(locales...)
	for t := t; t != language.Und; t = t.Parent() {
		s := localeStringCache.String(t)
		if r, ok := readerByLocale[s]; ok {
			return r, c
		}
	}
	// Fallback to default.
	return readerByLocale[DefaultLocale], language.No
}

// ForBase returns either the localization for language, or the default localization
// if no localization for language is found.
func ForBase(language language.Base) Reader {
	s := baseStringCache.String(language)
	r := readerByLocale[s]
	if r == nil {
		r = readerByLocale[DefaultLocale]
	}
	return r
}

// Default returns the reader for the default locale.
func Default() Reader { return readerByLocale[DefaultLocale] }

// Locales returns all locales of the bundle.
func Locales() []language.Tag { return allLocales }

// Readers returns all available readers.
func Readers() []Reader { return readers }

// Catalogs returns an iterator over all enabled catalogs.
func Catalogs() iter.Seq[Reader] {
	return func(yield func(Reader) bool) {
		if !yield(catalog_de{}) {
			return
		}
		if !yield(catalog_en{}) {
			return
		}
		if !yield(catalog_ru{}) {
			return
		}
	}
}

// TIKs
const (
	msg62489e1e07578e6e = `Nothing found in folder {text}`
	msg6aa44c2f549ae5e8 = `translated text`
	msgd2497314df5ae7e6 = `It was finished on {date-full} at {time-full}`
	msgdc0a1830b671625c = `searched {# files} in {# folders}`
	msgf5b4499f95971294 = `{# projects were} finished on {date-full} at {time-full} by {name}`
	msgfb968a4dc3768ccd = `Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut posuere tortor ex, at interdum lacus facilisis vel. In sed metus sit amet ex pellentesque consectetur quis in leo. Proin a tortor dolor. Duis sed sollicitudin diam. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Phasellus accumsan gravida lorem vel commodo. Nulla congue ligula leo, eget vulputate ipsum pharetra non. Etiam at ornare lacus, vel feugiat nulla. Nam sagittis, ligula ut ultrices hendrerit, ante erat convallis lectus, et blandit lectus lacus blandit velit. Etiam egestas, erat aliquet aliquam sodales, felis diam sagittis elit, a finibus augue libero eu mi. Sed libero arcu, aliquam sed nisi et, dignissim sollicitudin tortor. Nulla auctor ante quam, vitae placerat urna cursus sed. In hac habitasse platea dictumst. Nulla sagittis mauris et nulla dignissim mollis.

Integer non lacus pulvinar, ultricies magna a, consequat risus. Cras at arcu ullamcorper, hendrerit urna at, blandit quam. Curabitur mi diam, tempor a augue ut, tincidunt aliquam arcu. Sed luctus sem id fringilla tempor. In sed tempor quam. Nam turpis nunc, placerat et risus nec, rutrum malesuada est. Phasellus lobortis vehicula lacus. Donec lacus tellus, mollis ut nibh ut, bibendum congue lectus. Aenean tincidunt, nunc id rutrum posuere, arcu eros pharetra ipsum, eu blandit elit nunc ut lacus. Fusce dui arcu, commodo sit amet felis quis, tempor tincidunt dolor. Nullam urna enim, convallis eget gravida vitae, vestibulum convallis augue. Ut vel risus hendrerit, euismod est eget, pulvinar lacus. Aliquam quis hendrerit lorem. Proin semper pretium nunc at tempus. Mauris ac lacus nisl. Etiam semper mauris finibus massa ultricies euismod.

Praesent auctor aliquet sem auctor cursus. Phasellus vehicula, augue vel fringilla molestie, urna quam tincidunt mi, ac maximus ligula lectus sit amet nunc. Mauris sem justo, aliquam sed volutpat eget, aliquet sed orci. Phasellus aliquam neque vitae elit pulvinar, a faucibus urna fringilla. Duis faucibus tempus magna eget maximus. Nam tristique a ante et rutrum. Vestibulum id finibus tellus, eget aliquam arcu. In vel lacinia nibh, sit amet dignissim justo.

Cras gravida vulputate elit, sit amet facilisis est consectetur vitae. Aliquam erat volutpat. Aliquam in tortor in erat aliquet aliquet. Praesent at justo sed tortor pellentesque imperdiet. Phasellus enim dolor, consequat vel bibendum eu, laoreet interdum dui. Morbi sed vehicula lectus. Nam malesuada lorem consectetur luctus rutrum. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Proin eget libero in odio vestibulum euismod. Pellentesque eget viverra ex, quis sagittis massa. Quisque consectetur, odio eget posuere dictum, lorem velit pellentesque purus, eget suscipit turpis orci a augue. Morbi et ante leo. Nam pulvinar arcu vel nulla efficitur pharetra. Nunc condimentum elementum metus vitae aliquet. Vestibulum molestie molestie leo, in vulputate nulla interdum sit amet. Nam porttitor dui enim.

Nulla eget sodales sem, dignissim elementum nulla. Sed sed elit feugiat, fringilla leo sit amet, vestibulum purus. Mauris suscipit felis id ante vestibulum, ut scelerisque felis faucibus. Cras tempus est non scelerisque rutrum. Vivamus augue libero, auctor eget mi sit amet, varius volutpat dolor. Praesent est tortor, gravida ut justo ut, pellentesque sollicitudin metus. Nullam scelerisque velit vitae suscipit elementum. Ut mattis diam et consectetur aliquet. Morbi consequat urna nisl. Duis dolor tellus, faucibus in hendrerit vitae, egestas vel ipsum. Sed sem lacus, rhoncus in purus ut, consequat fringilla tortor. Integer velit nisl, egestas blandit dui id, vulputate mollis velit. Nullam metus lectus, pharetra lobortis sem vel, accumsan mollis nisl.`
)

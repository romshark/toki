package gengo

import (
	"errors"
	"fmt"
	"io"
	"iter"
	"strconv"
	"strings"

	"github.com/romshark/icumsg"
	"golang.org/x/text/language"
)

const TypePrefixCatalog = "Catalog"

type Writer struct {
	w io.Writer      // Destination writer.
	l language.Tag   // Locale
	m string         // ICU message.
	t []icumsg.Token // ICU tokens.
	i int            // Current index in t.

	translatorVar string
}

var lineBreak = []byte("\n")

func (w *Writer) printf(format string, a ...any) {
	_, _ = fmt.Fprintf(w.w, format, a...)
}

func (w *Writer) print(format string) {
	_, _ = fmt.Fprint(w.w, format)
	_, _ = w.w.Write(lineBreak)
}

func (w *Writer) println(a ...any) {
	_, _ = fmt.Fprintln(w.w, a...)
}

type Message struct {
	ID        string
	TIK       string
	ICUMsg    string
	ICUTokens []icumsg.Token
}

var replacerCatalogSuffix = strings.NewReplacer("-", "_")

func LocaleToCatalogSuffix(t language.Tag) string {
	s := t.String()
	return strings.ToUpper(replacerCatalogSuffix.Replace(s))
}

// WritePackageBundle writes the main bundle Go file.
func (w *Writer) WritePackageBundle(
	writer io.Writer,
	packageName string,
	srcLocale language.Tag, translationLocales []language.Tag,
	headTxtLines []string,
) {
	w.w, w.l = writer, srcLocale

	w.printf("// Generated by github.com/romshark/toki. DO NOT EDIT.\n")
	for _, l := range headTxtLines {
		w.printf("// %s\n", l)
	}
	w.printf(`
package %s

import (
	"fmt"
	"io"
	"iter"

	"github.com/go-playground/locales"
	"github.com/romshark/toki"
)

// MissingTranslationString is the default missing translation handler for String.
var MissingTranslationString = func(tik string, _ ...any) string {
	return fmt.Sprintf("[missing translation: %%q]", tik)
}

// MissingTranslationWrite is the default missing translation handler for Write.
var MissingTranslationWrite = func(
	w io.Writer, tik string, _ ...any,
) (written int, err error) {
	return fmt.Fprintf(w, "[missing translation: %%q]", tik)
}

const (
	minInt53 = -1 << 53
	maxInt53 = 1 << 53
)

func pluralRuleCardinal (t locales.Translator, quantity any) (locales.PluralRule) {
	var q float64
	switch n := quantity.(type) {
	case uint:
		if n >= maxInt53 {
			return locales.PluralRuleOther // Lossy conversion.
		}
		q = float64(n)
	case uint8:
		q = float64(n)
	case uint16:
		q = float64(n)
	case uint32:
		q = float64(n)
	case uint64:
		if n >= maxInt53 {
			return locales.PluralRuleOther // Lossy conversion.
		}
		q = float64(n)
	case int:
		if n >= maxInt53 || n <= minInt53 {
			return locales.PluralRuleOther // Lossy conversion.
		}
		q = float64(n)
	case int8:
		q = float64(n)
	case int16:
		q = float64(n)
	case int32:
		q = float64(n)
	case int64:
		if n >= maxInt53 || n <= minInt53 {
			return locales.PluralRuleOther // Lossy conversion.
		}
		q = float64(n)
	case float32:
		q = float64(n)
	case float64:
		q = float64(n)
	default:
		// Incorrect input type, fallback to other rule.
		return locales.PluralRuleOther
	}
	return t.CardinalPluralRule(float64(q), 0)
}

func pluralRuleOrdinal (t locales.Translator, quantity any) (locales.PluralRule) {
	var q float64
	switch n := quantity.(type) {
	case uint:
		if n >= maxInt53 {
			// Lossy conversion.
			return locales.PluralRuleOther
		}
		q = float64(n)
	case uint8:
		q = float64(n)
	case uint16:
		q = float64(n)
	case uint32:
		q = float64(n)
	case uint64:
		if n >= maxInt53 {
			// Lossy conversion.
			return locales.PluralRuleOther
		}
		q = float64(n)
	case int:
		if n >= maxInt53 || n <= minInt53 {
			// Lossy conversion.
			return locales.PluralRuleOther
		}
		q = float64(n)
	case int8:
		q = float64(n)
	case int16:
		q = float64(n)
	case int32:
		q = float64(n)
	case int64:
		if n >= maxInt53 || n <= minInt53 {
			// Lossy conversion.
			return locales.PluralRuleOther
		}
		q = float64(n)
	case float32:
		q = float64(n)
	case float64:
		q = float64(n)
	default:
		// Incorrect input type, fallback to default form.
		return locales.PluralRuleOther
	}
	return t.OrdinalPluralRule(float64(q), 0)
}

func subtract(number any, amount uint) any {
	switch v := number.(type) {
	case int:
		return v - int(amount)
	case uint:
		return v - uint(amount)
	case int8:
		return v - int8(amount)
	case uint8:
		return v - uint8(amount)
	case int16:
		return v - int16(amount)
	case uint16:
		return v - uint16(amount)
	case int32:
		return v - int32(amount)
	case uint32:
		return v - uint32(amount)
	case int64:
		return v - int64(amount)
	case uint64:
		return v - uint64(amount)
	case float64:
		return v - float64(amount)
	case float32:
		return v - float32(amount)
	default:
		return number
	}
}

// Prevent "unused function" linter errors.
var _ = pluralRuleCardinal(nil, maxInt53)
var _ = pluralRuleOrdinal(nil, maxInt53)
var _ = subtract(0, 0)
`, packageName)

	w.println("// Bundle bundles all currently enabled translations.")
	w.println("type Bundle struct {}")
	w.println("var _ toki.Bundler = Bundle{}")

	w.println("// Catalogs returns an iterator over all enabled catalogs.")
	w.println("func (Bundle) Catalogs() iter.Seq[toki.Reader] {")
	w.println("return func(yield func(toki.Reader) bool) {")
	for _, l := range translationLocales {
		suffix := LocaleToCatalogSuffix(l)
		typeName := TypePrefixCatalog + suffix
		w.printf("if !yield(%s{}) { return }\n", typeName)
	}
	w.println("}}")
}

func goPlaygroundLocalesPkg(locale language.Tag) string {
	return replacerCatalogSuffix.Replace(locale.String())
}

// WritePackageCatalog writes a catalog Go file.
func (w *Writer) WritePackageCatalog(
	writer io.Writer, locale language.Tag, packageName string, headTxtLines []string,
	msgIter iter.Seq[Message],
) {
	w.w, w.l = writer, locale

	w.println("// Generated by github.com/romshark/toki. DO NOT EDIT.")
	for _, l := range headTxtLines {
		w.printf("// %s\n", l)
	}
	w.printf("\npackage %s\n", packageName)
	w.println("import (")
	w.println("\t" + `"io"`)
	w.println("\t" + `"fmt"`)
	w.println("\t" + `"strings"`)
	w.println("")
	w.printf("\tlocales \"github.com/go-playground/locales\"\n")
	w.printf("\t locale \"github.com/go-playground/locales/%s\"\n",
		goPlaygroundLocalesPkg(locale))
	w.println("\ttoki" + `"github.com/romshark/toki"`)
	w.println("\tlanguage" + `"golang.org/x/text/language"`)
	w.println(")") // End of imports.

	w.writeCatalogType(msgIter)
}

func (w *Writer) writeCatalogType(msgIter iter.Seq[Message]) {
	localeCatalogSuffix := LocaleToCatalogSuffix(w.l)
	w.translatorVar = fmt.Sprintf("Translator%s", localeCatalogSuffix)
	w.printf("\nvar locale%s language.Tag\n", localeCatalogSuffix)
	w.printf("\nvar %s = locale.New()\n", w.translatorVar)

	w.printf(`func init() {
	var err error
	locale%s, err = language.Parse(%q)
	if err != nil {
		// This should never happen because the locale string value
		// is validated before code generation.
		panic(err)
	}
}
`, localeCatalogSuffix, w.l.String())

	// Type definition.
	catalogTypeName := TypePrefixCatalog + localeCatalogSuffix
	w.printf("// %s provides localization for %s.\n", catalogTypeName, w.l.String())
	w.printf("type %s struct {}\n", catalogTypeName)
	w.printf("var _ toki.Reader = %s{}\n\n", catalogTypeName)

	// Translation functions map by TIK based on strings.Builder.
	buildersMapName := "builders" + localeCatalogSuffix
	w.printf("var %s = map[string]func(args ...any) string {\n", buildersMapName)
	for msg := range msgIter {
		w.writeFuncStrBuilder(msg.ID, msg.TIK, msg.ICUMsg, msg.ICUTokens)
	}
	w.println(`}`)

	// Translation functions map by TIK based on io.Writer.
	writersMapName := "writers" + localeCatalogSuffix
	w.printf(
		"var %s = map[string]func(w io.Writer, args ...any) (int, error) {\n",
		writersMapName)
	for msg := range msgIter {
		w.writeFuncIOWriter(msg.ID, msg.TIK, msg.ICUMsg, msg.ICUTokens)
	}
	w.println(`}`)

	// Method Locale.
	w.println(`// Locale returns the locale c provides localization for.`)
	w.printf("func (%s) Locale() language.Tag { return locale%s }\n",
		catalogTypeName, localeCatalogSuffix)

	// Method Translator.
	w.println(`// Translator returns the localized translator.`)
	w.printf("func (%s) Translator() locales.Translator { return %s }\n",
		catalogTypeName, w.translatorVar)

	// Method String.
	w.println(`// String returns localized text string for the given TIK.`)
	w.printf("func (%s) String(tik string, args ...any) string {\n",
		catalogTypeName)
	w.writeMethodString(buildersMapName)
	w.print("}\n\n")

	// Method Write.
	w.println(`// Write writes localized text for the given TIK to writer.`)
	w.printf("func (%s) Write(\nwriter io.Writer, tik string, args ...any,\n)"+
		" (written int, err error) {\n",
		catalogTypeName)
	w.writeMethodWrite(writersMapName)
	w.print("}\n\n")
}

func (w *Writer) writeMethodWrite(fnMapVarName string) {
	w.printf("f := %s[tik];\n", fnMapVarName)
	w.println(`if f == nil { return MissingTranslationWrite(writer, tik, args...) }`)
	w.print("return f(writer, args...)")
}

func (w *Writer) writeMethodString(fnMapVarName string) {
	w.printf("f := %s[tik];\n", fnMapVarName)
	w.println(`if f == nil { return MissingTranslationString(tik, args...) }`)
	w.print("return f(args...)")
}

var ErrUnsupportedArgName = errors.New("unsupported argument name")

// literalConcat returns "" if message isn't just a sequence
// of literal tokens.
func (w *Writer) literalConcat(endIndex int) string {
	l := 0
	for i := w.i; i < endIndex; i++ {
		t := w.t[i]
		switch t.Type {
		case icumsg.TokenTypeLiteral:
			l += len(t.String(w.m, w.t))
		default:
			return "" // Not a sequence of literals, abort.
		}
	}

	var s strings.Builder
	s.Grow(l)
	for i := w.i; i < endIndex; i++ {
		t := w.t[i]
		if t.Type == icumsg.TokenTypeLiteral {
			s.WriteString(t.String(w.m, w.t))
		}
	}
	return s.String()
}

type argName struct {
	Index  int
	Gender bool
}

func parseArgName(s string) (argName, error) {
	if len(s) < len("var0") || !strings.HasPrefix(s, "var") {
		return argName{}, fmt.Errorf("%w: %q", ErrUnsupportedArgName, s)
	}
	gender := strings.HasSuffix(s, "_gender")

	endIndex := len("var0")
	for i := range s[endIndex:] {
		if s[i] < '0' || s[i] > '9' {
			endIndex += i
			break
		}
	}

	v, err := strconv.ParseUint(s[len("var"):endIndex], 10, 32)
	if err != nil {
		return argName{}, err
	}
	return argName{Index: int(v), Gender: gender}, nil
}

func isTokenArgType(t icumsg.TokenType) bool {
	return t >= icumsg.TokenTypeArgTypeNumber && t <= icumsg.TokenTypeArgTypeDuration
}

func isTokenArgStyle(t icumsg.TokenType) bool {
	return t >= icumsg.TokenTypeArgStyleShort && t <= icumsg.TokenTypeArgStyleCustom
}

func iterPluralLiteralParts(s string) iter.Seq[string] {
	return func(yield func(string) bool) {
		for {
			i := strings.IndexByte(s, '#')
			if i == -1 {
				if s != "" {
					yield(s) // Yield last part.
				}
				return
			}
			if i > 0 {
				if !yield(s[:i]) { // Yield part before #.
					return
				}
			}
			if !yield("#") {
				return
			}
			s = s[i+1:] // Continue after #.
		}
	}
}

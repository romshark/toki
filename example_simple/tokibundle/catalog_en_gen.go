// Generated by github.com/romshark/toki. DO NOT EDIT.

package tokibundle

import (
	"fmt"
	"io"
	"time"

	locales "github.com/go-playground/locales"
	locale "github.com/go-playground/locales/en"
	language "golang.org/x/text/language"
)

// This prevents the "imported and not used" error when some features are not used.
var (
	_ fmt.Formatter = nil
	_ time.Time

	tr_en  = locale.New()
	loc_en = language.MustParse("en")
)

type catalog_en struct{}

var writers_en = map[string]func(w io.Writer, args ...any) (int, error){
	msg62489e1e07578e6e: func(w io.Writer, args ...any) (written int, err error) {
		var n int
		n, err = wrs(w, "Nothing found in folder ")
		if err != nil {
			return written, err
		}
		written += n
		{
			s, _ := sv(args[0])
			n, err = wrs(w, s)
		}
		if err != nil {
			return written, err
		}
		written += n
		return written, nil
	},
	msg6aa44c2f549ae5e8: func(w io.Writer, args ...any) (written int, err error) {
		return wrs(w, "translated text")
	},
	msgd2497314df5ae7e6: func(w io.Writer, args ...any) (written int, err error) {
		var n int
		n, err = wrs(w, "It was finished on ")
		if err != nil {
			return written, err
		}
		written += n
		n, err = io.WriteString(w, tr_en.FmtDateFull(args[0].(time.Time)))
		if err != nil {
			return written, err
		}
		written += n
		n, err = wrs(w, " at ")
		if err != nil {
			return written, err
		}
		written += n
		n, err = io.WriteString(w, tr_en.FmtTimeFull(args[1].(time.Time)))
		if err != nil {
			return written, err
		}
		written += n
		return written, nil
	},
	msgdc0a1830b671625c: func(w io.Writer, args ...any) (written int, err error) {
		var n int
		n, err = wrs(w, "searched ")
		if err != nil {
			return written, err
		}
		written += n
		switch pluralRuleCardinal(tr_en, args[0]) {
		default:
			n, err = fmt.Fprintf(w, "%v", args[0])
			if err != nil {
				return written, err
			}
			written += n
			n, err = wrs(w, " files")
			if err != nil {
				return written, err
			}
			written += n
		}
		n, err = wrs(w, " in ")
		if err != nil {
			return written, err
		}
		written += n
		switch pluralRuleCardinal(tr_en, args[1]) {
		default:
			n, err = fmt.Fprintf(w, "%v", args[1])
			if err != nil {
				return written, err
			}
			written += n
			n, err = wrs(w, " folders")
			if err != nil {
				return written, err
			}
			written += n
		}
		return written, nil
	},
	msgf5b4499f95971294: func(w io.Writer, args ...any) (written int, err error) {
		var n int
		switch pluralRuleCardinal(tr_en, args[0]) {
		default:
			n, err = fmt.Fprintf(w, "%v", args[0])
			if err != nil {
				return written, err
			}
			written += n
			n, err = wrs(w, " projects were")
			if err != nil {
				return written, err
			}
			written += n
		}
		n, err = wrs(w, " finished on ")
		if err != nil {
			return written, err
		}
		written += n
		n, err = io.WriteString(w, tr_en.FmtDateFull(args[1].(time.Time)))
		if err != nil {
			return written, err
		}
		written += n
		n, err = wrs(w, " at ")
		if err != nil {
			return written, err
		}
		written += n
		n, err = io.WriteString(w, tr_en.FmtTimeFull(args[2].(time.Time)))
		if err != nil {
			return written, err
		}
		written += n
		n, err = wrs(w, " by ")
		if err != nil {
			return written, err
		}
		written += n
		{
			s, _ := sv(args[3])
			n, err = wrs(w, s)
		}
		if err != nil {
			return written, err
		}
		written += n
		return written, nil
	},
}

func (catalog_en) Locale() language.Tag { return loc_en }

func (catalog_en) Translator() locales.Translator { return tr_en }

func (catalog_en) String(tik string, args ...any) string {
	b := poolBufGet()
	defer poolBufPut(b)
	f := writers_en[tik]
	if f == nil {
		_, _ = MissingTranslation(b, loc_en, tik, args...)
	} else {
		_, _ = f(b, args...)
	}
	return b.String()
}

func (catalog_en) Write(
	writer io.Writer, tik string, args ...any,
) (written int, err error) {
	f := writers_en[tik]
	if f == nil {
		return MissingTranslation(writer, loc_en, tik, args...)
	}
	return f(writer, args...)
}
